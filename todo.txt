
Formatting disasterously reformats contextSuperClass options.

Preview sometimes sets its preferred size to wider than the main window.

Need a test if a grammar generation result is up to date with respect to a compilation result.

Compile single works now. If using compile single, we need to differentiate the grammar compilation result and the extractor compilation result.  They currently clobber each other.

Some of the lexer exceptions are because we are sometimes parsing with a Swing Document trailing newline, sometimes not, but returning the same ParseTreeProxy either way.  Need a "sansTrailingNewline()" / "withTrailingNewline()" copy constructor for a ParseTreeProxy.

Shouldn't JFSFileModifications be storing individual file hashes, not just a global one?

Or formatting:
   | ~
        ( '('
        | ')'
        | '{'
        | '}'
needs to special case ~ before a block.


Preview bugs:

Breadcrumb seems to stop working after a while - disappears.



Rewrite AntlrRunSubscriptions to use Subscribable.

Separate Output out of live preview so it can be used independently, and add an action to show it by right clicking in a grammar.

Rewrite AdhocHighlighterManager to extend AbstractHighlighter.

Duplicate lexer rule hashing can now pick up the same block twice - need to filter those
cases so we don't generate a hint suggesting to consolidate a single occurrence.
Example: A rule like "mat: 'mat'" will get a hint "replace existing rule with mat" - caused by duplicate hashing of token groups.

Need to elide TokenLabelType when generating the same way we do with "returns" statements.

Formatting option to align # alternative names (would need a justify phase, since we need max positions,
or would need a very smart custom format executor that can see what will happen - save this for later).

Need tests for hetero object graph

Finish ebnf suggestions parser - generated text is broken

Error 184 for overlapped rules - should offer to consolidate.

# Refactoring

Need a way to contribute different char filters based on region key

Combined undo for refactoring	 

Move annotations littered into SPI into their own package.

KeyedSemanticRegion and friends with comparable and two type parameters?  Would be more flexible than NamedSemanticRegions for capturing information.  Still needs enum key field?
  - Attributions could probably be that and it would be more intuitive
  - Will be needed for complex namespace matching, e.g. com.foo.bar.SomeName equals SomeName in another file - probably dot-scoping is not enough.

AntlrKeys should probably be in its own module.  So should the key types in antlr-common - not needed for general Antlr modules, only for
antlr language support.

JFS and friends should be under antlr-editing-plugins - not used in the general case.

# Antlr Editing Plugins To-Dos

  * Import finders and project helper sibling search being called WAY too many times per-parse - threadlocal context and cache?
     * Maybe a generalized threadlocal context and cache API?
  * Split out code to create parser and api for antlr parser results from annotations and
   other stuff in language spi  * does not belong together
  * Ability to specify a centrality key for Navigator panel annotations  
   * will have to be a Supplier<NamedReferenceSetKey<?>>, so it's not necessary to write implementation
    to enable graph-algorithm facilitated sorting
  * For SemanticRegion highlighting, nesting depth based alteration of color w/ some algorithms, e.g. alpha or hue + by
    * Nestable colorations, as in our old ebnf support
  * Relative should *prefer* but not insist on looking up the same type

!!! Font color entries not written to layer unless the annotation processor
is called multiple times (e.g. there is another highlighting entry on a
highlighter registration annotation on a key).

-------

# General Antlr Plugin Support To-Dos


FORMATTING:

  * Rename AntlrFormatterProvider to AntlrFormatter and update in the annotation processor
  * REINDENT SUPPORT
  * Should preserve whitespace if no action taken

ACTIONS:

  * Most likely just need to use shared action names now that they're in the editor kit
    * Well, that's a big fat NOPE.

OTHER:
  * Generic indexing support?  Will anything use it?
    * Annotation?
