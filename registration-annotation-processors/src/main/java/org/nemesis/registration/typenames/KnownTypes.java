package org.nemesis.registration.typenames;

import com.mastfrog.annotation.AnnotationUtils;
import java.util.EnumSet;
import java.util.Set;

/**
 * <b>DO NOT MODIFY THIS FILE!</b> This file is generated by analyzing the POMs
 * and class files used in all subprojects of theparent project for class names
 * that are likely to be used in codegeneration. It will be regenerated at build
 * time.
 **/
public enum KnownTypes implements TypeName {

    ABSTRACT_ANTLR_LIST_NAVIGATOR_PANEL(
        "org.nemesis.antlr.navigator.AbstractAntlrListNavigatorPanel",
        Libraries.NAVIGATORS),
    ABSTRACT_ANTLR_TREE_NAVIGATOR_PANEL(
        "org.nemesis.antlr.navigator.AbstractAntlrTreeNavigatorPanel",
        Libraries.NAVIGATORS),
    ABSTRACT_EDITOR_ACTION("org.netbeans.spi.editor.AbstractEditorAction",
        Libraries.LIB2),
    ABSTRACT_HIGHLIGHTER(
        "org.nemesis.antlr.spi.language.highlighting.AbstractHighlighter",
        Libraries.ANTLR_LANGUAGE),
    ABSTRACT_HIGHLIGHTS_CONTAINER(
        "org.netbeans.spi.editor.highlighting.support.AbstractHighlightsContainer",
        Libraries.LIB2),
    ABSTRACT_LOOKUP("org.openide.util.lookup.AbstractLookup", Libraries.LOOKUP),
    ABSTRACT_NODE("org.openide.nodes.AbstractNode", Libraries.NODES),
    ABSTRACT_PARSE_TREE_VISITOR(
        "org.antlr.v4.runtime.tree.AbstractParseTreeVisitor",
        Libraries.ANTLR_WRAPPER),
    ABSTRACT_REFACTORING(
        "org.netbeans.modules.refactoring.api.AbstractRefactoring",
        Libraries.MODULES_REFACTORING),
    ABSTRACT_REFACTORING_BUILDER(
        "org.nemesis.antlr.refactoring.AbstractRefactoringBuilder",
        Libraries.REFACTORING),
    ABSTRACT_REFACTORING_CONTEXT(
        "org.nemesis.antlr.refactoring.AbstractRefactoringContext",
        Libraries.REFACTORING),
    ACTION_BINDING("org.nemesis.antlr.spi.language.keybindings.ActionBinding",
        Libraries.ANTLR_LANGUAGE),
    ACTION_BINDINGS("org.nemesis.antlr.spi.language.keybindings.ActionBindings",
        Libraries.ANTLR_LANGUAGE),
    ACTION_ID("org.openide.awt.ActionID", Libraries.AWT),
    ACTION_REFERENCE("org.openide.awt.ActionReference", Libraries.AWT),
    ACTION_REFERENCES("org.openide.awt.ActionReferences", Libraries.AWT),
    ACTION_REGISTRATION("org.openide.awt.ActionRegistration", Libraries.AWT),
    ACTION_STATE("org.openide.awt.ActionState", Libraries.AWT),
    ACTIVITY_INDICATOR("com.mastfrog.swing.activity.ActivityIndicator",
        Libraries.WRAPPER),
    ADD_ANTLR_CAPABILITIES(
        "org.nemesis.antlr.project.spi.addantlr.AddAntlrCapabilities",
        Libraries.HELPERS),
    AMBIGUITIES("org.nemesis.antlr.file.api.Ambiguities", Libraries.SUPPORT),
    AMBIGUITY_CONSUMER("org.nemesis.antlr.file.api.AmbiguityConsumer",
        Libraries.SUPPORT),
    AMBIGUITY_RECORD("org.nemesis.antlr.file.api.AmbiguityRecord",
        Libraries.SUPPORT),
    ANTLR_ACTION("org.nemesis.antlr.spi.language.AntlrAction",
        Libraries.ANTLR_LANGUAGE),
    ANTLR_ANTLR_LANGUAGE_REGISTRATION(
        "org.nemesis.antlr.file.AntlrAntlrLanguageRegistration",
        Libraries.SUPPORT),
    ANTLR_CHAR_STREAM("org.antlr.runtime.CharStream", Libraries.RUNTIME),
    ANTLR_CONFIGURATION("org.nemesis.antlr.project.AntlrConfiguration",
        Libraries.HELPERS),
    ANTLR_CONFIGURATION_IMPLEMENTATION(
        "org.nemesis.antlr.project.spi.AntlrConfigurationImplementation",
        Libraries.HELPERS),
    ANTLR_CONSTANTS("org.nemesis.antlr.common.AntlrConstants",
        Libraries.ANTLR_COMMON),
    ANTLR_ERROR_LISTENER("org.antlr.v4.runtime.ANTLRErrorListener",
        Libraries.ANTLR_WRAPPER),
    ANTLR_FILE_OBJECT_RELATIVE_RESOLVER(
        "org.nemesis.antlr.grammar.file.resolver.AntlrFileObjectRelativeResolver",
        Libraries.RESOLVER),
    ANTLR_FOLDS_REGISTRATION("org.nemesis.antlr.fold.AntlrFoldsRegistration",
        Libraries.FOLDING),
    ANTLR_FOO_EDITOR_FEATURES("org.nemesis.antlr.file.AntlrFooEditorFeatures",
        Libraries.SUPPORT),
    ANTLR_FORMATTER_CONFIG(
        "org.nemesis.antlr.language.formatting.config.AntlrFormatterConfig",
        Libraries.FORMATTING),
    ANTLR_FORMATTER_PROVIDER(
        "org.nemesis.antlrformatting.spi.AntlrFormatterProvider",
        Libraries.FORMATTERS),
    ANTLR_FORMATTER_REGISTRATION(
        "org.nemesis.antlrformatting.spi.AntlrFormatterRegistration",
        Libraries.FORMATTERS),
    ANTLR_FORMATTER_STUB("org.nemesis.antlrformatting.spi.AntlrFormatterStub",
        Libraries.FORMATTERS),
    ANTLR_FORMATTING_CUSTOMIZER(
        "org.nemesis.antlr.language.formatting.ui.AntlrFormattingCustomizer",
        Libraries.UI),
    ANTLR_FORMATTING_CUSTOMIZER_REGISTRATION(
        "org.nemesis.antlr.language.formatting.ui.AntlrFormattingCustomizerRegistration",
        Libraries.UI),
    ANTLR_GENERIC_CODE_COMPLETION(
        "org.nemesis.antlr.file.AntlrGenericCodeCompletion", Libraries.SUPPORT),
    ANTLR_HIERARCHY("org.nemesis.antlr.file.AntlrHierarchy", Libraries.SUPPORT),
    ANTLR_HIGHLIGHTING_LAYER_FACTORY(
        "org.nemesis.antlr.highlighting.AntlrHighlightingLayerFactory",
        Libraries.HIGHLIGHTING),
    ANTLR_INLINE_RULE_CUSTOM_REFACTORING(
        "org.nemesis.antlr.file.AntlrInlineRuleCustomRefactoring",
        Libraries.SUPPORT),
    ANTLR_INLINE_RULE_CUSTOM_REFACTORING_ACTION(
        "org.nemesis.antlr.file.AntlrInlineRuleCustomRefactoringAction",
        Libraries.SUPPORT),
    ANTLR_KEYS("org.nemesis.antlr.file.AntlrKeys", Libraries.SUPPORT),
    ANTLR_LANGUAGE_REGISTRATION(
        "org.nemesis.antlr.spi.language.AntlrLanguageRegistration",
        Libraries.ANTLR_LANGUAGE),
    ANTLR_MIME_TYPE_REGISTRATION(
        "org.nemesis.antlr.spi.language.AntlrMimeTypeRegistration",
        Libraries.ANTLR_LANGUAGE),
    ANTLR_NAVIGATOR_PANEL_REGISTRATION(
        "org.nemesis.antlr.navigator.AntlrNavigatorPanelRegistration",
        Libraries.NAVIGATORS),
    ANTLR_NB_PARSER("org.nemesis.antlr.file.AntlrNbParser", Libraries.SUPPORT),
    ANTLR_PARSER("org.antlr.v4.parse.ANTLRParser", Libraries.ANTLR_WRAPPER),
    ANTLR_PARSE_RESULT("org.nemesis.antlr.spi.language.AntlrParseResult",
        Libraries.ANTLR_LANGUAGE),
    ANTLR_RECOGNITION_EXCEPTION("org.antlr.runtime.RecognitionException",
        Libraries.RUNTIME),
    ANTLR_REFACTORING_PLUGIN_FACTORY(
        "org.nemesis.antlr.refactoring.AntlrRefactoringPluginFactory",
        Libraries.REFACTORING),
    ANTLR_RULES_MAPPING("org.nemesis.antlr.file.AntlrRulesMapping",
        Libraries.SUPPORT),
    ANTLR_TOKEN("org.nemesis.antlr.file.AntlrToken", Libraries.SUPPORT),
    ANTLR_TOKENS("org.nemesis.antlr.file.AntlrTokens", Libraries.SUPPORT),
    ANTLR_TOKEN_STREAM("org.antlr.runtime.TokenStream", Libraries.RUNTIME),
    ANTLR_V4_COMMON_TOKEN("org.antlr.v4.runtime.CommonToken",
        Libraries.ANTLR_WRAPPER),
    ANTLR_V4_LEXER("org.antlr.v4.runtime.Lexer", Libraries.ANTLR_WRAPPER),
    ANTLR_V4_PARSER("org.antlr.v4.runtime.Parser", Libraries.ANTLR_WRAPPER),
    ANTLR_V4_TOKEN("org.antlr.v4.runtime.Token", Libraries.ANTLR_WRAPPER),
    ANTLR_V4_TOOL("org.antlr.v4.Tool", Libraries.ANTLR_WRAPPER),
    ANTLR_VERSION("org.nemesis.antlr.wrapper.AntlrVersion",
        Libraries.ANTLR_WRAPPER),
    ANT_BUILD_EXTENDER("org.netbeans.api.project.ant.AntBuildExtender",
        Libraries.PROJECT_ANT),
    ANT_EDITABLE_PROPERTIES(
        "org.netbeans.spi.project.support.ant.EditableProperties",
        Libraries.PROJECT_ANT),
    ANT_FOLDERS_HELPER_IMPLEMENTATION(
        "com.mastfrog.antlr.project.helpers.ant.AntFoldersHelperImplementation",
        Libraries.ANT),
    ANT_FOLDERS_HELPER_IMPLEMENTATION_FACTORY(
        "com.mastfrog.antlr.project.helpers.ant.AntFoldersHelperImplementationFactory",
        Libraries.ANT),
    ANT_PROJECT_HELPER("org.netbeans.spi.project.support.ant.AntProjectHelper",
        Libraries.PROJECT_ANT),
    APPEARANCE("org.nemesis.antlr.navigator.Appearance", Libraries.NAVIGATORS),
    APPLIER("org.nemesis.editor.edit.Applier", Libraries.EDITOR_UTILS),
    ASYNC_COMPLETION_QUERY(
        "org.netbeans.spi.editor.completion.support.AsyncCompletionQuery",
        Libraries.EDITOR_COMPLETION),
    ASYNC_COMPLETION_TASK(
        "org.netbeans.spi.editor.completion.support.AsyncCompletionTask",
        Libraries.EDITOR_COMPLETION),
    ATNBUILDER("org.antlr.v4.parse.ATNBuilder", Libraries.ANTLR_WRAPPER),
    ATTRIBUTED_FOREIGN_NAME_REFERENCE(
        "org.nemesis.extraction.AttributedForeignNameReference",
        Libraries.EXTRACTION),
    ATTRIBUTES_UTILITIES("org.netbeans.api.editor.settings.AttributesUtilities",
        Libraries.SETTINGS),
    ATTRIBUTIONS("org.nemesis.extraction.Attributions", Libraries.EXTRACTION),
    AUXILIARY_CONFIGURATION("org.netbeans.spi.project.AuxiliaryConfiguration",
        Libraries.PROJECTAPI),
    AUXILIARY_PROPERTIES("org.netbeans.spi.project.AuxiliaryProperties",
        Libraries.PROJECTAPI),
    BAD_MAGIC_NUMBER_EXCEPTION(
        "org.nemesis.antlr.common.cachefile.BadMagicNumberException",
        Libraries.ANTLR_COMMON),
    BASE_ACTION("org.netbeans.editor.BaseAction", Libraries.LIB),
    BASE_DOCUMENT("org.netbeans.editor.BaseDocument", Libraries.LIB),
    BASE_KIT("org.netbeans.editor.BaseKit", Libraries.LIB),
    BASE_TEXT_UI("org.netbeans.editor.BaseTextUI", Libraries.LIB),
    BEFORE_REFACTORING_TASK(
        "org.nemesis.antlr.refactoring.common.BeforeRefactoringTask",
        Libraries.REFACTORING_COMMON),
    BIAS("com.mastfrog.util.search.Bias", Libraries.WRAPPER),
    BIT_SET_HETERO_OBJECT_GRAPH(
        "org.nemesis.data.graph.hetero.BitSetHeteroObjectGraph",
        Libraries.MODELS),
    BIT_SET_UTILS("com.mastfrog.graph.BitSetUtils", Libraries.WRAPPER),
    BOILERPLATE(
        "com.mastfrog.editor.features.annotations.EditorFeaturesRegistration.Boilerplate",
        Libraries.FEATURES),
    BOOL("com.mastfrog.function.state.Bool", Libraries.WRAPPER),
    BOOLEAN_CONSUMER("com.mastfrog.function.BooleanConsumer", Libraries.WRAPPER),
    BRACE_GROUP_SCANNER("com.mastfrog.editor.features.BraceGroupScanner",
        Libraries.FEATURES),
    BUFFERED_TREE_NODE_STREAM("org.antlr.runtime.tree.BufferedTreeNodeStream",
        Libraries.RUNTIME),
    BUILT_IN_ACTION("org.nemesis.antlr.spi.language.keybindings.BuiltInAction",
        Libraries.ANTLR_LANGUAGE),
    CACHE_FILE_READER("org.nemesis.antlr.common.cachefile.CacheFileReader",
        Libraries.ANTLR_COMMON),
    CACHE_FILE_UTILS("org.nemesis.antlr.common.cachefile.CacheFileUtils",
        Libraries.ANTLR_COMMON),
    CACHE_FILE_WRITER("org.nemesis.antlr.common.cachefile.CacheFileWriter",
        Libraries.ANTLR_COMMON),
    CANCELLABLE("org.openide.util.Cancellable", Libraries.UTIL),
    CANCELLED_STATE("org.nemesis.antlr.common.cancel.CancelledState",
        Libraries.ANTLR_COMMON),
    CANCELLER("org.nemesis.antlr.common.cancel.Canceller",
        Libraries.ANTLR_COMMON),
    CANDIDATES_COLLECTION("com.mastfrog.antlr.cc.CandidatesCollection",
        Libraries.CORE),
    CARET_INFORMATION("org.nemesis.editor.ops.CaretInformation",
        Libraries.EDITOR_UTILS),
    CARET_MOVE_HANDLER("org.netbeans.spi.editor.caret.CaretMoveHandler",
        Libraries.LIB2),
    CARET_POSITION_CALCULATOR("org.nemesis.editor.ops.CaretPositionCalculator",
        Libraries.EDITOR_UTILS),
    CARET_TOKEN("com.mastfrog.antlr.code.completion.spi.CaretToken",
        Libraries.COMPLETION),
    CARET_TOKEN_RELATION(
        "com.mastfrog.antlr.code.completion.spi.CaretTokenRelation",
        Libraries.COMPLETION),
    CELL_ITEM_RENDERER("org.nemesis.antlr.completion.grammar.CellItemRenderer",
        Libraries.CODE_COMPLETION),
    CHANGE_INFO("org.netbeans.spi.editor.hints.ChangeInfo", Libraries.HINTS),
    CHANGE_KIND("org.nemesis.editor.edit.ChangeKind", Libraries.EDITOR_UTILS),
    CHANGE_SUPPORT("org.openide.util.ChangeSupport", Libraries.UTIL),
    CHAR_FILTER("org.nemesis.charfilter.CharFilter", Libraries.FILTERS),
    CHAR_FILTER_BUILDER("org.nemesis.charfilter.CharFilterBuilder",
        Libraries.FILTERS),
    CHAR_FILTER_SPEC("org.nemesis.charfilter.anno.CharFilterSpec",
        Libraries.FILTERS),
    CHAR_PREDICATE("org.nemesis.charfilter.CharPredicate", Libraries.FILTERS),
    CHAR_PREDICATES("org.nemesis.charfilter.CharPredicates", Libraries.FILTERS),
    CHAR_PREDICATE_BUILDER("org.nemesis.charfilter.CharPredicateBuilder",
        Libraries.FILTERS),
    CHAR_PREDICATE_SPEC("org.nemesis.charfilter.anno.CharPredicateSpec",
        Libraries.FILTERS),
    CHAR_SEQUENCE_CHAR_STREAM("com.mastfrog.antlr.utils.CharSequenceCharStream",
        Libraries.UTILS),
    CHAR_SEQUENCE_UTILITIES(
        "org.netbeans.lib.editor.util.CharSequenceUtilities",
        Libraries.EDITOR_UTIL),
    CHAR_STREAM("org.antlr.v4.runtime.CharStream", Libraries.ANTLR_WRAPPER),
    CHAR_STREAMS("org.antlr.v4.runtime.CharStreams", Libraries.ANTLR_WRAPPER),
    CHECKS("com.mastfrog.util.preconditions.Checks", Libraries.WRAPPER),
    CHECK_FOR_NULL("org.netbeans.api.annotations.common.CheckForNull",
        Libraries.COMMON),
    CHILDREN("org.openide.nodes.Children", Libraries.NODES),
    CLONEABLE_EDITOR_SUPPORT("org.openide.text.CloneableEditorSupport",
        Libraries.TEXT),
    CLOSE_COOKIE("org.openide.cookies.CloseCookie", Libraries.NODES),
    CLOSE_OPERATION_STATE("org.netbeans.core.spi.multiview.CloseOperationState",
        Libraries.MULTIVIEW),
    COALESCER("com.mastfrog.range.Coalescer", Libraries.WRAPPER),
    CODE_COMPLETION_CORE("com.mastfrog.antlr.cc.CodeCompletionCore",
        Libraries.CORE),
    CODE_GENERATOR("org.antlr.v4.codegen.CodeGenerator", Libraries.ANTLR_WRAPPER),
    CODE_STYLE_PREFERENCES(
        "org.netbeans.modules.editor.indent.spi.CodeStylePreferences",
        Libraries.INDENT),
    COLON_HANDLING("org.nemesis.antlr.language.formatting.config.ColonHandling",
        Libraries.FORMATTING),
    COLORATION("org.nemesis.antlr.spi.language.highlighting.Coloration",
        Libraries.ANTLR_LANGUAGE),
    COLORING_CATEGORY(
        "org.nemesis.antlr.spi.language.highlighting.ColoringCategory",
        Libraries.ANTLR_LANGUAGE),
    COMMON_TOKEN("org.antlr.runtime.CommonToken", Libraries.RUNTIME),
    COMMON_TOKEN_STREAM("org.antlr.v4.runtime.CommonTokenStream",
        Libraries.ANTLR_WRAPPER),
    COMMON_TREE("org.antlr.runtime.tree.CommonTree", Libraries.RUNTIME),
    COMMON_TREE_NODE_STREAM("org.antlr.runtime.tree.CommonTreeNodeStream",
        Libraries.RUNTIME),
    COMPARABLE_REFACTORING_ELEMENT_IMPLEMENTATION(
        "org.nemesis.antlr.refactoring.ComparableRefactoringElementImplementation",
        Libraries.REFACTORING),
    COMPLETER("com.mastfrog.antlr.code.completion.spi.Completer",
        Libraries.COMPLETION),
    COMPLETION("org.netbeans.api.editor.completion.Completion",
        Libraries.EDITOR_COMPLETION),
    COMPLETIONS_SUPPLIER(
        "com.mastfrog.antlr.code.completion.spi.CompletionsSupplier",
        Libraries.COMPLETION),
    COMPLETION_APPLIER(
        "com.mastfrog.antlr.code.completion.spi.CompletionApplier",
        Libraries.COMPLETION),
    COMPLETION_ITEM("org.netbeans.spi.editor.completion.CompletionItem",
        Libraries.EDITOR_COMPLETION),
    COMPLETION_ITEMS("com.mastfrog.antlr.code.completion.spi.CompletionItems",
        Libraries.COMPLETION),
    COMPLETION_ITEM_BUILDER(
        "com.mastfrog.antlr.code.completion.spi.CompletionItemBuilder",
        Libraries.COMPLETION),
    COMPLETION_ITEM_IMPL(
        "org.nemesis.antlr.completion.grammar.CompletionItemImpl",
        Libraries.CODE_COMPLETION),
    COMPLETION_PROVIDER("org.netbeans.spi.editor.completion.CompletionProvider",
        Libraries.EDITOR_COMPLETION),
    COMPLETION_RESULT_SET(
        "org.netbeans.spi.editor.completion.CompletionResultSet",
        Libraries.EDITOR_COMPLETION),
    COMPLETION_TASK("org.netbeans.spi.editor.completion.CompletionTask",
        Libraries.EDITOR_COMPLETION),
    CONTENTS_CHECKSUMS("org.nemesis.data.named.ContentsChecksums",
        Libraries.MODELS),
    CONTEXT(
        "org.netbeans.spi.editor.highlighting.HighlightsLayerFactory.Context",
        Libraries.LIB2),
    CONTEXT_AWARE_ACTION("org.openide.util.ContextAwareAction",
        Libraries.UTIL_UI),
    CONVERTERS("com.mastfrog.converters.Converters", Libraries.WRAPPER),
    COOKIE_SET("org.openide.nodes.CookieSet", Libraries.NODES),
    COPY_ACTION("org.openide.actions.CopyAction", Libraries.ACTIONS),
    CRITERIA("com.mastfrog.antlr.utils.Criteria", Libraries.UTILS),
    CRITERION("com.mastfrog.antlr.utils.Criterion", Libraries.UTILS),
    CUSTOM_REFACTORING("org.nemesis.antlr.refactoring.CustomRefactoring",
        Libraries.REFACTORING),
    CUSTOM_REFACTORING_PANEL(
        "org.netbeans.modules.refactoring.spi.ui.CustomRefactoringPanel",
        Libraries.MODULES_REFACTORING),
    CUSTOM_REFACTORING_REGISTRATION(
        "org.nemesis.antlr.refactoring.CustomRefactoringRegistration",
        Libraries.REFACTORING),
    CUT_ACTION("org.openide.actions.CutAction", Libraries.ACTIONS),
    DATA_FOLDER("org.openide.loaders.DataFolder", Libraries.LOADERS),
    DATA_INT_RANGE("com.mastfrog.range.DataIntRange", Libraries.WRAPPER),
    DATA_LOADER("org.openide.loaders.DataLoader", Libraries.LOADERS),
    DATA_LOADER_POOL("org.openide.loaders.DataLoaderPool", Libraries.LOADERS),
    DATA_NODE("org.openide.loaders.DataNode", Libraries.LOADERS),
    DATA_OBJECT("org.openide.loaders.DataObject", Libraries.LOADERS),
    DATA_OBJECT_EXISTS_EXCEPTION(
        "org.openide.loaders.DataObjectExistsException", Libraries.LOADERS),
    DATA_OBJECT_HOOKS("org.nemesis.antlr.spi.language.DataObjectHooks",
        Libraries.ANTLR_LANGUAGE),
    DATA_OBJECT_NOT_FOUND_EXCEPTION(
        "org.openide.loaders.DataObjectNotFoundException", Libraries.LOADERS),
    DATA_RANGE("com.mastfrog.range.DataRange", Libraries.WRAPPER),
    DATA_SHADOW("org.openide.loaders.DataShadow", Libraries.LOADERS),
    DEBUG_LEAKS("org.nemesis.antlr.file.DebugLeaks", Libraries.SUPPORT),
    DECLARATION_TOKEN_PROCESSOR(
        "org.netbeans.editor.ext.ExtSyntaxSupport.DeclarationTokenProcessor",
        Libraries.LIB),
    DEFAULT_ERROR_STRATEGY("org.antlr.v4.runtime.DefaultErrorStrategy",
        Libraries.ANTLR_WRAPPER),
    DELETED_TEXT_INTERCEPTOR(
        "org.netbeans.spi.editor.typinghooks.DeletedTextInterceptor",
        Libraries.LIB2),
    DELETE_ACTION("org.openide.actions.DeleteAction", Libraries.ACTIONS),
    DELIMITER_PAIR(
        "com.mastfrog.editor.features.annotations.EditorFeaturesRegistration.DelimiterPair",
        Libraries.FEATURES),
    DELIVERY_STRATEGY("org.nemesis.antlr.subscription.DeliveryStrategy",
        Libraries.ANTLR_COMMON),
    DIALOG_DESCRIPTOR("org.openide.DialogDescriptor", Libraries.DIALOGS),
    DIALOG_DISPLAYER("org.openide.DialogDisplayer", Libraries.DIALOGS),
    DOCUMENT_ADAPTER("org.nemesis.source.spi.DocumentAdapter", Libraries.INPUT),
    DOCUMENT_ADAPTER_REGISTRY("org.nemesis.source.spi.DocumentAdapterRegistry",
        Libraries.INPUT),
    DOCUMENT_BI_CONSUMER("org.nemesis.editor.function.DocumentBiConsumer",
        Libraries.EDITOR_UTILS),
    DOCUMENT_CONSUMER("org.nemesis.editor.function.DocumentConsumer",
        Libraries.EDITOR_UTILS),
    DOCUMENT_LISTENER_PRIORITY(
        "org.netbeans.lib.editor.util.swing.DocumentListenerPriority",
        Libraries.EDITOR_UTIL),
    DOCUMENT_MODIFIER("org.nemesis.editor.edit.DocumentModifier",
        Libraries.EDITOR_UTILS),
    DOCUMENT_OPERATION("org.nemesis.editor.ops.DocumentOperation",
        Libraries.EDITOR_UTILS),
    DOCUMENT_OPERATION_BUILDER(
        "org.nemesis.editor.ops.DocumentOperationBuilder",
        Libraries.EDITOR_UTILS),
    DOCUMENT_OPERATION_CONTEXT(
        "org.nemesis.editor.ops.DocumentOperationContext",
        Libraries.EDITOR_UTILS),
    DOCUMENT_OPERATOR("org.nemesis.editor.ops.DocumentOperator",
        Libraries.EDITOR_UTILS),
    DOCUMENT_PRE_AND_POST_PROCESSOR(
        "org.nemesis.editor.ops.DocumentPreAndPostProcessor",
        Libraries.EDITOR_UTILS),
    DOCUMENT_PROCESSOR("org.nemesis.editor.ops.DocumentProcessor",
        Libraries.EDITOR_UTILS),
    DOCUMENT_RUNNABLE("org.nemesis.editor.function.DocumentRunnable",
        Libraries.EDITOR_UTILS),
    DOCUMENT_SUPPLIER("org.nemesis.editor.function.DocumentSupplier",
        Libraries.EDITOR_UTILS),
    DOCUMENT_TRI_CONSUMER("org.nemesis.editor.function.DocumentTriConsumer",
        Libraries.EDITOR_UTILS),
    DOCUMENT_UTILITIES("org.netbeans.lib.editor.util.swing.DocumentUtilities",
        Libraries.EDITOR_UTIL),
    DYNAMIC_GRAPH("com.mastfrog.graph.dynamic.DynamicGraph", Libraries.WRAPPER),
    EBNF_BASE_LISTENER("com.mastfrog.tiny.ebnf.parser.EbnfBaseListener",
        Libraries.PARSER),
    EBNF_BASE_VISITOR("com.mastfrog.tiny.ebnf.parser.EbnfBaseVisitor",
        Libraries.PARSER),
    EBNF_LEXER("com.mastfrog.tiny.ebnf.parser.EbnfLexer", Libraries.PARSER),
    EBNF_LISTENER("com.mastfrog.tiny.ebnf.parser.EbnfListener", Libraries.PARSER),
    EBNF_PARSER("com.mastfrog.tiny.ebnf.parser.EbnfParser", Libraries.PARSER),
    EBNF_SUGGESTER("com.mastfrog.tiny.ebnf.parser.EbnfSuggester",
        Libraries.PARSER),
    EBNF_VISITOR("com.mastfrog.tiny.ebnf.parser.EbnfVisitor", Libraries.PARSER),
    EDITABLE_PROPERTIES("org.openide.util.EditableProperties", Libraries.UTIL),
    EDITOR_ACTION_NAMES("org.netbeans.api.editor.EditorActionNames",
        Libraries.LIB2),
    EDITOR_ACTION_REGISTRATION(
        "org.netbeans.api.editor.EditorActionRegistration", Libraries.LIB2),
    EDITOR_ATTRIBUTES_FINDER(
        "org.nemesis.antlr.spi.language.highlighting.EditorAttributesFinder",
        Libraries.ANTLR_LANGUAGE),
    EDITOR_COOKIE("org.openide.cookies.EditorCookie", Libraries.TEXT),
    EDITOR_DOCUMENT_UTILS(
        "org.netbeans.api.editor.document.EditorDocumentUtils",
        Libraries.DOCUMENT),
    EDITOR_FEATURES("com.mastfrog.editor.features.EditorFeatures",
        Libraries.FEATURES),
    EDITOR_FEATURES_BUILDER(
        "com.mastfrog.editor.features.EditorFeaturesBuilder", Libraries.FEATURES),
    EDITOR_FEATURES_REGISTRATION(
        "com.mastfrog.editor.features.annotations.EditorFeaturesRegistration",
        Libraries.FEATURES),
    EDITOR_REGISTRY("org.netbeans.api.editor.EditorRegistry", Libraries.LIB2),
    EDITOR_SELECTION_UTILS("org.nemesis.editor.util.EditorSelectionUtils",
        Libraries.EDITOR_UTILS),
    EDITOR_STYLE_CONSTANTS(
        "org.netbeans.api.editor.settings.EditorStyleConstants",
        Libraries.SETTINGS),
    EDITOR_UI("org.netbeans.editor.EditorUI", Libraries.LIB),
    EDITOR_UTILITIES("org.netbeans.editor.Utilities", Libraries.LIB),
    EDIT_BAG("org.nemesis.editor.edit.EditBag", Libraries.EDITOR_UTILS),
    ELISION(
        "com.mastfrog.editor.features.annotations.EditorFeaturesRegistration.Elision",
        Libraries.FEATURES),
    EMBEDDING_HELPER("org.nemesis.antlr.spi.language.EmbeddingHelper",
        Libraries.ANTLR_LANGUAGE),
    EMBEDDING_PRESENCE("org.netbeans.spi.lexer.EmbeddingPresence",
        Libraries.LEXER),
    ENHANCED_TOKEN_STREAM("org.nemesis.antlrformatting.api.EnhancedTokenStream",
        Libraries.FORMATTERS),
    ENH_EDITOR_DOCUMENT("org.nemesis.editor.doc.EnhEditorDocument",
        Libraries.EDITOR_UTILS),
    ENUM_COMBO_BOX_MODEL("org.nemesis.swing.combo.EnumComboBoxModel",
        Libraries.SWING_UTILS),
    ENUM_CONSTANT_LOCALIZER("org.nemesis.localizers.spi.EnumConstantLocalizer",
        Libraries.LOCALIZERS),
    ERROR_DESCRIPTION("org.netbeans.spi.editor.hints.ErrorDescription",
        Libraries.HINTS),
    ERROR_DESCRIPTION_FACTORY(
        "org.netbeans.spi.editor.hints.ErrorDescriptionFactory", Libraries.HINTS),
    ERROR_NODE("org.antlr.v4.runtime.tree.ErrorNode", Libraries.ANTLR_WRAPPER),
    EVENT_APPLIER("org.nemesis.antlr.subscription.EventApplier",
        Libraries.ANTLR_COMMON),
    EXCEPTIONS("com.mastfrog.util.preconditions.Exceptions", Libraries.WRAPPER),
    EXTENSION("org.netbeans.api.project.ant.AntBuildExtender.Extension",
        Libraries.PROJECT_ANT),
    EXTRACTION("org.nemesis.extraction.Extraction", Libraries.EXTRACTION),
    EXTRACTION_CONTRIBUTOR("org.nemesis.extraction.ExtractionContributor",
        Libraries.EXTRACTION),
    EXTRACTION_KEY("org.nemesis.extraction.key.ExtractionKey",
        Libraries.EXTRACTION),
    EXTRACTION_PARSER_RESULT("org.nemesis.extraction.ExtractionParserResult",
        Libraries.EXTRACTION),
    EXTRACTION_REGISTRATION("org.nemesis.extraction.ExtractionRegistration",
        Libraries.EXTRACTION),
    EXTRACTOR("org.nemesis.extraction.Extractor", Libraries.EXTRACTION),
    EXTRACTORS("org.nemesis.extraction.Extractors", Libraries.EXTRACTION),
    EXTRACTOR_BUILDER("org.nemesis.extraction.ExtractorBuilder",
        Libraries.EXTRACTION),
    EXT_KIT("org.netbeans.editor.ext.ExtKit", Libraries.LIB),
    EXT_SYNTAX_SUPPORT("org.netbeans.editor.ext.ExtSyntaxSupport", Libraries.LIB),
    FILE_CHANGE_ADAPTER("org.openide.filesystems.FileChangeAdapter",
        Libraries.FILESYSTEMS),
    FILE_CHOOSER_BUILDER("org.openide.filesystems.FileChooserBuilder",
        Libraries.NB),
    FILE_ENCODING_QUERY("org.netbeans.api.queries.FileEncodingQuery",
        Libraries.QUERIES),
    FILE_LOCK("org.openide.filesystems.FileLock", Libraries.FILESYSTEMS),
    FILE_OBJECT("org.openide.filesystems.FileObject", Libraries.FILESYSTEMS),
    FILE_OWNER_QUERY("org.netbeans.api.project.FileOwnerQuery",
        Libraries.PROJECTAPI),
    FILE_QUERY("org.nemesis.antlr.project.FileQuery", Libraries.HELPERS),
    FILE_RENAME_EVENT("org.openide.filesystems.FileRenameEvent",
        Libraries.FILESYSTEMS),
    FILE_TYPE(
        "org.nemesis.antlr.spi.language.AntlrLanguageRegistration.FileType",
        Libraries.ANTLR_LANGUAGE),
    FILE_UTIL("org.openide.filesystems.FileUtil", Libraries.FILESYSTEMS),
    FILTER_NODE("org.openide.nodes.FilterNode", Libraries.NODES),
    FIX("org.netbeans.spi.editor.hints.Fix", Libraries.HINTS),
    FIXED_RANGE_IMPL("org.nemesis.data.FixedRangeImpl", Libraries.MODELS),
    FIXES("org.nemesis.antlr.spi.language.fix.Fixes", Libraries.ANTLR_LANGUAGE),
    FIX_BUILDER("org.nemesis.antlr.spi.language.fix.FixBuilder",
        Libraries.ANTLR_LANGUAGE),
    FIX_CONSUMER("org.nemesis.antlr.spi.language.fix.FixConsumer",
        Libraries.ANTLR_LANGUAGE),
    FOLD("org.netbeans.api.editor.fold.Fold", Libraries.FOLD),
    FOLDERS("org.nemesis.antlr.project.Folders", Libraries.HELPERS),
    FOLDERS_LOOKUP_STRATEGY("org.nemesis.antlr.project.FoldersLookupStrategy",
        Libraries.HELPERS),
    FOLDERS_LOOKUP_STRATEGY_IMPLEMENTATION_FACTORY(
        "org.nemesis.antlr.project.spi.FoldersLookupStrategyImplementationFactory",
        Libraries.HELPERS),
    FOLDER_LOOKUP_STRATEGY_IMPLEMENTATION(
        "org.nemesis.antlr.project.spi.FolderLookupStrategyImplementation",
        Libraries.HELPERS),
    FOLDER_QUERY("org.nemesis.antlr.project.spi.FolderQuery", Libraries.HELPERS),
    FOLD_HANDLE("org.openide.windows.FoldHandle", Libraries.IO),
    FOLD_HIERARCHY("org.netbeans.api.editor.fold.FoldHierarchy", Libraries.FOLD),
    FOLD_HIERARCHY_TRANSACTION(
        "org.netbeans.spi.editor.fold.FoldHierarchyTransaction", Libraries.FOLD),
    FOLD_INFO("org.netbeans.spi.editor.fold.FoldInfo", Libraries.FOLD),
    FOLD_MANAGER("org.netbeans.spi.editor.fold.FoldManager", Libraries.FOLD),
    FOLD_MANAGER_FACTORY("org.netbeans.spi.editor.fold.FoldManagerFactory",
        Libraries.FOLD),
    FOLD_OPERATION("org.netbeans.spi.editor.fold.FoldOperation", Libraries.FOLD),
    FOLD_TEMPLATE("org.netbeans.api.editor.fold.FoldTemplate", Libraries.FOLD),
    FOLD_TYPE("org.netbeans.api.editor.fold.FoldType", Libraries.FOLD),
    FOLD_TYPE_NAME("org.nemesis.antlr.fold.FoldTypeName", Libraries.FOLDING),
    FOLD_TYPE_PROVIDER("org.netbeans.spi.editor.fold.FoldTypeProvider",
        Libraries.FOLD),
    FOLD_TYPE_SPEC("org.nemesis.antlr.fold.FoldTypeSpec", Libraries.FOLDING),
    FOLLOW_SETS_HOLDER("com.mastfrog.antlr.cc.FollowSetsHolder", Libraries.CORE),
    FOLLOW_SET_WITH_PATH("com.mastfrog.antlr.cc.FollowSetWithPath",
        Libraries.CORE),
    FONT_COLOR_NAMES("org.netbeans.api.editor.settings.FontColorNames",
        Libraries.SETTINGS),
    FONT_COLOR_SETTINGS("org.netbeans.api.editor.settings.FontColorSettings",
        Libraries.SETTINGS),
    FOO("org.nemesis.antlr.file.Foo", Libraries.SUPPORT),
    FORMATTING_ACTION("org.nemesis.antlrformatting.api.FormattingAction",
        Libraries.FORMATTERS),
    FORMATTING_CONTEXT("org.nemesis.antlrformatting.api.FormattingContext",
        Libraries.FORMATTERS),
    FORMATTING_RESULT("org.nemesis.antlrformatting.api.FormattingResult",
        Libraries.FORMATTERS),
    FORMATTING_RULE("org.nemesis.antlrformatting.api.FormattingRule",
        Libraries.FORMATTERS),
    FORMATTING_RULES("org.nemesis.antlrformatting.api.FormattingRules",
        Libraries.FORMATTERS),
    FUNCTION_PETA_FUNCTION("com.mastfrog.function.PetaFunction",
        Libraries.WRAPPER),
    G4INPLACE_RENAME_ACTION("org.nemesis.antlr.file.G4InplaceRenameAction",
        Libraries.SUPPORT),
    G4REFACTORING_PLUGIN_FACTORY(
        "org.nemesis.antlr.file.G4RefactoringPluginFactory", Libraries.SUPPORT),
    GENERATED_GRAMMAR_OPENER(
        "org.nemesis.antlr.project.spi.addantlr.GeneratedGrammarOpener",
        Libraries.HELPERS),
    GENERIC_REFACTORING_CONTEXT_ACTION(
        "org.nemesis.antlr.refactoring.GenericRefactoringContextAction",
        Libraries.REFACTORING),
    GOTO("org.nemesis.antlr.spi.language.Goto", Libraries.ANTLR_LANGUAGE),
    GRAMMAR_ASTADAPTOR("org.antlr.v4.parse.GrammarASTAdaptor",
        Libraries.ANTLR_WRAPPER),
    GRAMMAR_COMPLETION_PROVIDER(
        "org.nemesis.antlr.completion.grammar.GrammarCompletionProvider",
        Libraries.CODE_COMPLETION),
    GRAMMAR_COMPLETION_QUERY(
        "org.nemesis.antlr.completion.grammar.GrammarCompletionQuery",
        Libraries.CODE_COMPLETION),
    GRAMMAR_FILE_DELETION_HOOK(
        "org.nemesis.antlr.file.api.GrammarFileDeletionHook", Libraries.SUPPORT),
    GRAMMAR_SOURCE("org.nemesis.source.api.GrammarSource", Libraries.INPUT),
    GRAMMAR_SOURCE_IMPLEMENTATION(
        "org.nemesis.source.spi.GrammarSourceImplementation", Libraries.INPUT),
    GRAMMAR_SOURCE_IMPLEMENTATION_FACTORY(
        "org.nemesis.source.spi.GrammarSourceImplementationFactory",
        Libraries.INPUT),
    GRAMMAR_TREE_VISITOR("org.antlr.v4.parse.GrammarTreeVisitor",
        Libraries.ANTLR_WRAPPER),
    HACKS("com.mastfrog.antlr.project.helpers.ant.Hacks", Libraries.ANT),
    HASHABLE("org.nemesis.data.Hashable", Libraries.MODELS),
    HASHER("org.nemesis.data.Hashable.Hasher", Libraries.MODELS),
    HELP_CTX("org.openide.util.HelpCtx", Libraries.UTIL_UI),
    HETERO_GRAPH_VISITOR("org.nemesis.data.graph.hetero.HeteroGraphVisitor",
        Libraries.MODELS),
    HEURISTIC_RULE_NAME_COMPARATOR(
        "com.mastfrog.antlr.utils.HeuristicRuleNameComparator", Libraries.UTILS),
    HIGHLIGHTER_KEY_REGISTRATION(
        "org.nemesis.antlr.spi.language.highlighting.semantic.HighlighterKeyRegistration",
        Libraries.ANTLR_LANGUAGE),
    HIGHLIGHTER_KEY_REGISTRATIONS(
        "org.nemesis.antlr.spi.language.highlighting.semantic.HighlighterKeyRegistrations",
        Libraries.ANTLR_LANGUAGE),
    HIGHLIGHTING_TOKEN_CATEGORY(
        "org.nemesis.antlr.spi.language.highlighting.TokenCategory",
        Libraries.ANTLR_LANGUAGE),
    HIGHLIGHTS_CONTAINER(
        "org.netbeans.spi.editor.highlighting.HighlightsContainer",
        Libraries.LIB2),
    HIGHLIGHTS_LAYER("org.netbeans.spi.editor.highlighting.HighlightsLayer",
        Libraries.LIB2),
    HIGHLIGHTS_LAYER_FACTORY(
        "org.netbeans.spi.editor.highlighting.HighlightsLayerFactory",
        Libraries.LIB2),
    HIGHLIGHT_CONSUMER(
        "org.nemesis.antlr.spi.language.highlighting.HighlightConsumer",
        Libraries.ANTLR_LANGUAGE),
    HIGHLIGHT_REFRESH_TRIGGER(
        "org.nemesis.antlr.spi.language.highlighting.semantic.HighlightRefreshTrigger",
        Libraries.ANTLR_LANGUAGE),
    HIGHLIGHT_ZORDER(
        "org.nemesis.antlr.spi.language.highlighting.semantic.HighlightZOrder",
        Libraries.ANTLR_LANGUAGE),
    HTML_RENDERER("org.nemesis.swing.html.HtmlRenderer", Libraries.SWING_UTILS),
    IMAGE_UTILITIES("org.openide.util.ImageUtilities", Libraries.UTIL_UI),
    IMPORTERS_FINDER("org.nemesis.antlr.refactoring.usages.ImportersFinder",
        Libraries.REFACTORING),
    IMPORTS("org.nemesis.antlr.spi.language.Imports", Libraries.ANTLR_LANGUAGE),
    IMPORT_BASED_RESOLVER(
        "org.nemesis.extraction.attribution.ImportBasedResolver",
        Libraries.EXTRACTION),
    IMPORT_FINDER("org.nemesis.extraction.attribution.ImportFinder",
        Libraries.EXTRACTION),
    IMPORT_KEY_SUPPLIER("org.nemesis.extraction.attribution.ImportKeySupplier",
        Libraries.EXTRACTION),
    INDENT_CONTEXT("org.netbeans.modules.editor.indent.spi.Context",
        Libraries.INDENT),
    INDEXED_RESOLVABLE("com.mastfrog.abstractions.list.IndexedResolvable",
        Libraries.WRAPPER),
    INDEXING_MANAGER(
        "org.netbeans.modules.parsing.api.indexing.IndexingManager",
        Libraries.INDEXING),
    INDEX_ADDRESSABLE("org.nemesis.data.IndexAddressable", Libraries.MODELS),
    INDEX_ADDRESSABLE_ITEM(
        "org.nemesis.data.IndexAddressable.IndexAddressableItem",
        Libraries.MODELS),
    INPLACE_RENAME("org.nemesis.antlr.instantrename.annotations.InplaceRename",
        Libraries.RENAME),
    INPUT_ATTRIBUTES("org.netbeans.api.lexer.InputAttributes", Libraries.LEXER),
    INSTALLED_FILE_LOCATOR("org.openide.modules.InstalledFileLocator",
        Libraries.ANTLR_WRAPPER),
    INSTALLER("com.mastfrog.antlr.project.helpers.ant.Installer", Libraries.ANT),
    INSTANCE_CONTENT("org.openide.util.lookup.InstanceContent", Libraries.LOOKUP),
    INSTANCE_COOKIE("org.openide.cookies.InstanceCookie", Libraries.NODES),
    INSTANT_RENAME_ACTION("org.nemesis.antlr.instantrename.InstantRenameAction",
        Libraries.RENAME),
    INSTANT_RENAME_ACTION_BUILDER(
        "org.nemesis.antlr.instantrename.InstantRenameActionBuilder",
        Libraries.RENAME),
    INT_ARRAY_MAPPING("com.mastfrog.antlr.cc.IntArrayMapping", Libraries.CORE),
    INT_PREDICATES("com.mastfrog.predicates.integer.IntPredicates",
        Libraries.WRAPPER),
    INT_RANGE("com.mastfrog.range.IntRange", Libraries.WRAPPER),
    INT_SET_MAPPING("com.mastfrog.antlr.cc.IntSetMapping", Libraries.CORE),
    INT_STREAM("org.antlr.v4.runtime.IntStream", Libraries.ANTLR_WRAPPER),
    INVALID_ARGUMENT_EXCEPTION(
        "com.mastfrog.util.preconditions.InvalidArgumentException",
        Libraries.WRAPPER),
    IO_CONSUMER("com.mastfrog.function.throwing.io.IOConsumer",
        Libraries.WRAPPER),
    IO_FUNCTION("com.mastfrog.function.throwing.io.IOFunction",
        Libraries.WRAPPER),
    IO_RUNNABLE("com.mastfrog.function.throwing.io.IORunnable",
        Libraries.WRAPPER),
    IO_SUPPLIER("com.mastfrog.function.throwing.io.IOSupplier",
        Libraries.WRAPPER),
    IO_TRI_FUNCTION("com.mastfrog.function.throwing.io.IOTriFunction",
        Libraries.WRAPPER),
    ITERABLE_TOKEN_SOURCE("org.nemesis.antlr.spi.language.IterableTokenSource",
        Libraries.ANTLR_LANGUAGE),
    KEY("org.nemesis.antlr.spi.language.keybindings.Key",
        Libraries.ANTLR_LANGUAGE),
    KEYBINDING("org.nemesis.antlr.spi.language.keybindings.Keybinding",
        Libraries.ANTLR_LANGUAGE),
    KEYBINDINGS("org.nemesis.antlr.spi.language.keybindings.Keybindings",
        Libraries.ANTLR_LANGUAGE),
    KEY_FACTORY("org.nemesis.antlr.subscription.KeyFactory",
        Libraries.ANTLR_COMMON),
    KEY_MODIFIERS("org.nemesis.antlr.spi.language.keybindings.KeyModifiers",
        Libraries.ANTLR_LANGUAGE),
    KEY_TO_FOLD_CONVERTER("org.nemesis.antlr.fold.KeyToFoldConverter",
        Libraries.FOLDING),
    LAMBDA_UTILS("com.mastfrog.antlr.project.helpers.ant.LambdaUtils",
        Libraries.ANT),
    LANGUAGE("org.netbeans.api.lexer.Language", Libraries.LEXER),
    LANGUAGE_EMBEDDING("org.netbeans.spi.lexer.LanguageEmbedding",
        Libraries.LEXER),
    LANGUAGE_HIERARCHY("org.netbeans.spi.lexer.LanguageHierarchy",
        Libraries.LEXER),
    LAZY_FIX_LIST("org.netbeans.spi.editor.hints.LazyFixList", Libraries.HINTS),
    LEFT_RECURSIVE_RULE_ALT_INFO(
        "org.antlr.v4.analysis.LeftRecursiveRuleAltInfo",
        Libraries.ANTLR_WRAPPER),
    LEVENSHTEIN_DISTANCE("com.mastfrog.util.strings.LevenshteinDistance",
        Libraries.WRAPPER),
    LEXER("org.netbeans.spi.lexer.Lexer", Libraries.LEXER),
    LEXER_INPUT("org.netbeans.spi.lexer.LexerInput", Libraries.LEXER),
    LEXER_INTERPRETER("org.antlr.v4.runtime.LexerInterpreter",
        Libraries.ANTLR_WRAPPER),
    LEXER_RESTART_INFO("org.netbeans.spi.lexer.LexerRestartInfo",
        Libraries.LEXER),
    LEXER_TOKEN("org.netbeans.api.lexer.Token", Libraries.LEXER),
    LEXER_TOKEN_ID("org.netbeans.api.lexer.TokenId", Libraries.LEXER),
    LEXING_STATE("org.nemesis.antlrformatting.api.LexingState",
        Libraries.FORMATTERS),
    LEXING_STATE_BUILDER("org.nemesis.antlrformatting.api.LexingStateBuilder",
        Libraries.FORMATTERS),
    LEXING_STATE_CRITERIA_BUILDER(
        "org.nemesis.antlrformatting.api.LexingStateCriteriaBuilder",
        Libraries.FORMATTERS),
    LIBRARY("org.netbeans.api.project.libraries.Library", Libraries.LIBRARIES),
    LIBRARY_MANAGER("org.netbeans.api.project.libraries.LibraryManager",
        Libraries.LIBRARIES),
    LINE("org.openide.text.Line", Libraries.TEXT),
    LINE_DOCUMENT("org.netbeans.api.editor.document.LineDocument",
        Libraries.DOCUMENT),
    LINE_DOCUMENT_UTILS("org.netbeans.api.editor.document.LineDocumentUtils",
        Libraries.DOCUMENT),
    LINE_POSITION(
        "com.mastfrog.editor.features.annotations.EditorFeaturesRegistration.LinePosition",
        Libraries.FEATURES),
    LIST_MODEL_POPULATOR("org.nemesis.antlr.navigator.ListModelPopulator",
        Libraries.NAVIGATORS),
    LNG("com.mastfrog.function.state.Lng", Libraries.WRAPPER),
    LOCALIZE("org.nemesis.localizers.annotations.Localize", Libraries.LOCALIZERS),
    LOCALIZER("org.nemesis.localizers.spi.Localizer", Libraries.LOCALIZERS),
    LOCALIZERS("org.nemesis.localizers.api.Localizers", Libraries.LOCALIZERS),
    LOCK_RUN_RESULT("org.nemesis.antlr.spi.language.ParseLock.LockRunResult",
        Libraries.ANTLR_LANGUAGE),
    LOOKUP("org.openide.util.Lookup", Libraries.LOOKUP),
    LOOKUPS("org.openide.util.lookup.Lookups", Libraries.LOOKUP),
    LOOKUP_EVENT("org.openide.util.LookupEvent", Libraries.LOOKUP),
    LOOKUP_LISTENER("org.openide.util.LookupListener", Libraries.LOOKUP),
    MAP_CACHE("org.nemesis.antlr.subscription.MapCache", Libraries.ANTLR_COMMON),
    MAP_FACTORIES("org.nemesis.antlr.subscription.MapFactories",
        Libraries.ANTLR_COMMON),
    MESSAGES("org.openide.util.NbBundle.Messages", Libraries.UTIL),
    MIME_LOOKUP("org.netbeans.api.editor.mimelookup.MimeLookup",
        Libraries.MIMELOOKUP),
    MIME_PATH("org.netbeans.api.editor.mimelookup.MimePath",
        Libraries.MIMELOOKUP),
    MIME_REGISTRATION("org.netbeans.api.editor.mimelookup.MimeRegistration",
        Libraries.MIMELOOKUP),
    MIME_REGISTRATIONS("org.netbeans.api.editor.mimelookup.MimeRegistrations",
        Libraries.MIMELOOKUP),
    MIME_RESOLVER("org.openide.filesystems.MIMEResolver", Libraries.FILESYSTEMS),
    MNEMONICS("org.openide.awt.Mnemonics", Libraries.AWT),
    MODAL_TOKEN("org.nemesis.antlrformatting.api.ModalToken",
        Libraries.FORMATTERS),
    MODE("org.openide.windows.Mode", Libraries.WINDOWS),
    MULTI_DATA_OBJECT("org.openide.loaders.MultiDataObject", Libraries.LOADERS),
    MULTI_DOCUMENT_UNDO("org.nemesis.editor.ops.MultiDocumentUndo",
        Libraries.EDITOR_UTILS),
    MULTI_FILE_LOADER("org.openide.loaders.MultiFileLoader", Libraries.LOADERS),
    MULTI_FILE_SYSTEM("org.openide.filesystems.MultiFileSystem",
        Libraries.FILESYSTEMS),
    MULTI_VIEW_EDITOR_ELEMENT(
        "org.netbeans.core.spi.multiview.text.MultiViewEditorElement",
        Libraries.MULTIVIEW),
    MULTI_VIEW_ELEMENT("org.netbeans.core.spi.multiview.MultiViewElement",
        Libraries.MULTIVIEW),
    MULTI_VIEW_ELEMENT_CALLBACK(
        "org.netbeans.core.spi.multiview.MultiViewElementCallback",
        Libraries.MULTIVIEW),
    MULTI_VIEW_FACTORY("org.netbeans.core.spi.multiview.MultiViewFactory",
        Libraries.MULTIVIEW),
    MUTEX("org.openide.util.Mutex", Libraries.UTIL),
    NAMED("com.mastfrog.abstractions.Named", Libraries.WRAPPER),
    NAMED_EXTRACTION_KEY("org.nemesis.extraction.key.NamedExtractionKey",
        Libraries.EXTRACTION),
    NAMED_FIND_USAGES_PLUGIN(
        "org.nemesis.antlr.refactoring.NamedFindUsagesPlugin",
        Libraries.REFACTORING),
    NAMED_INDEX_ADDRESSABLE(
        "org.nemesis.data.IndexAddressable.NamedIndexAddressable",
        Libraries.MODELS),
    NAMED_REGION_DATA("org.nemesis.extraction.NamedRegionData",
        Libraries.EXTRACTION),
    NAMED_REGION_EXTRACTOR_BUILDER(
        "org.nemesis.extraction.NamedRegionExtractorBuilder",
        Libraries.EXTRACTION),
    NAMED_REGION_KEY("org.nemesis.extraction.key.NamedRegionKey",
        Libraries.EXTRACTION),
    NAMED_REGION_REFERENCE_SET("org.nemesis.data.named.NamedRegionReferenceSet",
        Libraries.MODELS),
    NAMED_REGION_REFERENCE_SETS(
        "org.nemesis.data.named.NamedRegionReferenceSets", Libraries.MODELS),
    NAMED_REGION_REFERENCE_SETS_BUILDER(
        "org.nemesis.data.named.NamedRegionReferenceSetsBuilder",
        Libraries.MODELS),
    NAMED_SEMANTIC_REGION("org.nemesis.data.named.NamedSemanticRegion",
        Libraries.MODELS),
    NAMED_SEMANTIC_REGIONS("org.nemesis.data.named.NamedSemanticRegions",
        Libraries.MODELS),
    NAMED_SEMANTIC_REGIONS_BUILDER(
        "org.nemesis.data.named.NamedSemanticRegionsBuilder", Libraries.MODELS),
    NAMED_SEMANTIC_REGION_POSITION_INDEX(
        "org.nemesis.data.named.NamedSemanticRegionPositionIndex",
        Libraries.MODELS),
    NAMED_SEMANTIC_REGION_REFERENCE(
        "org.nemesis.data.named.NamedSemanticRegionReference", Libraries.MODELS),
    NAME_AND_OFFSETS("org.nemesis.extraction.NameAndOffsets",
        Libraries.EXTRACTION),
    NAME_REFERENCE_SET_KEY("org.nemesis.extraction.key.NameReferenceSetKey",
        Libraries.EXTRACTION),
    NAME_REGION_CONSUMER("org.nemesis.extraction.NameRegionConsumer",
        Libraries.EXTRACTION),
    NAVIGATOR_PANEL("org.netbeans.spi.navigator.NavigatorPanel",
        Libraries.NAVIGATOR),
    NAVIGATOR_PANEL_CONFIG("org.nemesis.antlr.navigator.NavigatorPanelConfig",
        Libraries.NAVIGATORS),
    NB_ANTLR_UTILS("org.nemesis.antlr.spi.language.NbAntlrUtils",
        Libraries.ANTLR_LANGUAGE),
    NB_BUNDLE("org.openide.util.NbBundle", Libraries.UTIL),
    NB_DOCUMENT("org.openide.text.NbDocument", Libraries.TEXT),
    NB_EDITOR_DOCUMENT("org.netbeans.modules.editor.NbEditorDocument",
        Libraries.EDITOR),
    NB_EDITOR_KIT("org.netbeans.modules.editor.NbEditorKit", Libraries.EDITOR),
    NB_EDITOR_UI("org.netbeans.modules.editor.NbEditorUI", Libraries.EDITOR),
    NB_EDITOR_UTILITIES("org.netbeans.modules.editor.NbEditorUtilities",
        Libraries.EDITOR),
    NB_LEXER_ADAPTER("org.nemesis.antlr.spi.language.NbLexerAdapter",
        Libraries.ANTLR_LANGUAGE),
    NB_PARSER_HELPER("org.nemesis.antlr.spi.language.NbParserHelper",
        Libraries.ANTLR_LANGUAGE),
    NB_PREFERENCES("org.openide.util.NbPreferences", Libraries.UTIL),
    NEW_ANTLR_CONFIGURATION_INFO(
        "org.nemesis.antlr.project.spi.addantlr.NewAntlrConfigurationInfo",
        Libraries.HELPERS),
    NODE("org.openide.nodes.Node", Libraries.NODES),
    NON_NULL("org.netbeans.api.annotations.common.NonNull", Libraries.COMMON),
    NOTIFY_DESCRIPTOR("org.openide.NotifyDescriptor", Libraries.DIALOGS),
    NULL_ALLOWED("org.netbeans.api.annotations.common.NullAllowed",
        Libraries.COMMON),
    OBJ("com.mastfrog.function.state.Obj", Libraries.WRAPPER),
    OBJECT_GRAPH("com.mastfrog.graph.ObjectGraph", Libraries.WRAPPER),
    OFFSETS_BAG("org.netbeans.spi.editor.highlighting.support.OffsetsBag",
        Libraries.LIB2),
    OPEN_ACTION("org.openide.actions.OpenAction", Libraries.ACTIONS),
    OPEN_COOKIE("org.openide.cookies.OpenCookie", Libraries.NODES),
    OPTIONS_PANEL_CONTROLLER("org.netbeans.spi.options.OptionsPanelController",
        Libraries.OPTIONS),
    OR_HANDLING("org.nemesis.antlr.language.formatting.config.OrHandling",
        Libraries.FORMATTING),
    OR_HANDLING_RADIO_BUTTON_MODEL(
        "org.nemesis.antlr.language.formatting.ui.OrHandlingRadioButtonModel",
        Libraries.UI),
    OWNERSHIP_QUERY("org.nemesis.antlr.project.spi.OwnershipQuery",
        Libraries.HELPERS),
    PAIR("org.openide.util.Pair", Libraries.UTIL),
    PARAMETERS("org.openide.util.Parameters", Libraries.UTIL),
    PARSER("org.netbeans.modules.parsing.spi.Parser", Libraries.PARSING),
    PARSER_CONTROL(
        "org.nemesis.antlr.spi.language.AntlrLanguageRegistration.ParserControl",
        Libraries.ANTLR_LANGUAGE),
    PARSER_FACTORY("org.netbeans.modules.parsing.spi.ParserFactory",
        Libraries.PARSING),
    PARSER_INTERPRETER("org.antlr.v4.runtime.ParserInterpreter",
        Libraries.ANTLR_WRAPPER),
    PARSER_MANAGER("org.netbeans.modules.parsing.api.ParserManager",
        Libraries.PARSING),
    PARSER_RESULT_TASK("org.netbeans.modules.parsing.spi.ParserResultTask",
        Libraries.PARSING),
    PARSER_RULE_CONTEXT("org.antlr.v4.runtime.ParserRuleContext",
        Libraries.ANTLR_WRAPPER),
    PARSE_EXCEPTION("org.netbeans.modules.parsing.spi.ParseException",
        Libraries.PARSING),
    PARSE_RESULT_CONTENTS("org.nemesis.antlr.spi.language.ParseResultContents",
        Libraries.ANTLR_LANGUAGE),
    PARSE_RESULT_HOOK("org.nemesis.antlr.spi.language.ParseResultHook",
        Libraries.ANTLR_LANGUAGE),
    PARSE_TREE("org.antlr.v4.runtime.tree.ParseTree", Libraries.ANTLR_WRAPPER),
    PARSE_TREE_LISTENER("org.antlr.v4.runtime.tree.ParseTreeListener",
        Libraries.ANTLR_WRAPPER),
    PARSE_TREE_VISITOR("org.antlr.v4.runtime.tree.ParseTreeVisitor",
        Libraries.ANTLR_WRAPPER),
    PARSE_TREE_WALKER("org.antlr.v4.runtime.tree.ParseTreeWalker",
        Libraries.ANTLR_WRAPPER),
    PARSING_BAG("org.nemesis.source.api.ParsingBag", Libraries.INPUT),
    PETA_FUNCTION("org.nemesis.antlr.refactoring.usages.PetaFunction",
        Libraries.REFACTORING),
    PLACES("org.openide.modules.Places", Libraries.ANTLR_WRAPPER),
    POSITION_BOUNDS("org.openide.text.PositionBounds", Libraries.TEXT),
    POSITION_CARET_TOKEN(
        "org.nemesis.antlr.completion.grammar.PositionCaretToken",
        Libraries.CODE_COMPLETION),
    POSITION_FACTORY("org.nemesis.editor.position.PositionFactory",
        Libraries.EDITOR_UTILS),
    POSITION_RANGE("org.nemesis.editor.position.PositionRange",
        Libraries.EDITOR_UTILS),
    POSITION_REF("org.openide.text.PositionRef", Libraries.TEXT),
    POSITION_REGION("org.netbeans.lib.editor.util.swing.PositionRegion",
        Libraries.EDITOR_UTIL),
    POTENTIAL_BUILD_FILE_FINDER(
        "org.nemesis.antlr.projectupdatenotificaton.PotentialBuildFileFinder",
        Libraries.ANTLR_COMMON),
    PREDICATES("com.mastfrog.predicates.Predicates", Libraries.WRAPPER),
    PREFERENCES_CUSTOMIZER(
        "org.netbeans.modules.options.editor.spi.PreferencesCustomizer",
        Libraries.OPTIONS_EDITOR),
    PRESENTER("org.openide.util.actions.Presenter", Libraries.UTIL_UI),
    PREVIEW_PROVIDER("org.netbeans.modules.options.editor.spi.PreviewProvider",
        Libraries.OPTIONS_EDITOR),
    PROBLEM("org.netbeans.modules.refactoring.api.Problem",
        Libraries.MODULES_REFACTORING),
    PROBLEM_DETAILS_FACTORY(
        "org.netbeans.modules.refactoring.spi.ProblemDetailsFactory",
        Libraries.MODULES_REFACTORING),
    PROBLEM_DETAILS_IMPLEMENTATION(
        "org.netbeans.modules.refactoring.spi.ProblemDetailsImplementation",
        Libraries.MODULES_REFACTORING),
    PROGRESS_EVENT("org.netbeans.modules.refactoring.api.ProgressEvent",
        Libraries.MODULES_REFACTORING),
    PROGRESS_HANDLE("org.netbeans.api.progress.ProgressHandle",
        Libraries.PROGRESS),
    PROGRESS_LISTENER("org.netbeans.modules.refactoring.api.ProgressListener",
        Libraries.MODULES_REFACTORING),
    PROJECT("org.netbeans.api.project.Project", Libraries.PROJECTAPI),
    PROJECT_CLASS_PATH_EXTENDER(
        "org.netbeans.spi.java.project.classpath.ProjectClassPathExtender",
        Libraries.PROJECT),
    PROJECT_INFORMATION("org.netbeans.api.project.ProjectInformation",
        Libraries.PROJECTAPI),
    PROJECT_MANAGER("org.netbeans.api.project.ProjectManager",
        Libraries.PROJECTAPI),
    PROJECT_UPDATES("org.nemesis.antlr.projectupdatenotificaton.ProjectUpdates",
        Libraries.ANTLR_COMMON),
    PROJECT_UTILS("org.netbeans.api.project.ProjectUtils", Libraries.PROJECTAPI),
    PROPERTY_EVALUATOR("org.netbeans.spi.project.support.ant.PropertyEvaluator",
        Libraries.PROJECT_ANT),
    PROPERTY_EVALUATOR_PROVIDER(
        "org.netbeans.modules.java.api.common.project.PropertyEvaluatorProvider",
        Libraries.API_COMMON),
    PROVIDER("org.openide.util.Lookup.Provider", Libraries.LOOKUP),
    PROXY_LOOKUP("org.openide.util.lookup.ProxyLookup", Libraries.LOOKUP),
    QUICK_SEARCH("org.openide.awt.QuickSearch", Libraries.AWT),
    RANGE("com.mastfrog.range.Range", Libraries.WRAPPER),
    RANGE_POSITION_RELATION("com.mastfrog.range.RangePositionRelation",
        Libraries.WRAPPER),
    RANGE_RELATION("com.mastfrog.range.RangeRelation", Libraries.WRAPPER),
    RECOGNITION_EXCEPTION("org.antlr.v4.runtime.RecognitionException",
        Libraries.ANTLR_WRAPPER),
    RECOGNIZER("org.antlr.v4.runtime.Recognizer", Libraries.ANTLR_WRAPPER),
    REFACTORABILITY("org.nemesis.antlr.refactoring.common.Refactorability",
        Libraries.REFACTORING_COMMON),
    REFACTORINGS_BUILDER("org.nemesis.antlr.refactoring.RefactoringsBuilder",
        Libraries.REFACTORING),
    REFACTORING_ACTIONS_BRIDGE(
        "org.nemesis.antlr.refactoring.common.RefactoringActionsBridge",
        Libraries.REFACTORING_COMMON),
    REFACTORING_ACTIONS_FACTORY(
        "org.netbeans.modules.refactoring.api.ui.RefactoringActionsFactory",
        Libraries.MODULES_REFACTORING),
    REFACTORING_ELEMENTS_BAG(
        "org.netbeans.modules.refactoring.spi.RefactoringElementsBag",
        Libraries.MODULES_REFACTORING),
    REFACTORING_ELEMENT_IMPLEMENTATION(
        "org.netbeans.modules.refactoring.spi.RefactoringElementImplementation",
        Libraries.MODULES_REFACTORING),
    REFACTORING_PLUGIN("org.netbeans.modules.refactoring.spi.RefactoringPlugin",
        Libraries.MODULES_REFACTORING),
    REFACTORING_PLUGIN_FACTORY(
        "org.netbeans.modules.refactoring.spi.RefactoringPluginFactory",
        Libraries.MODULES_REFACTORING),
    REFACTORING_UI("org.netbeans.modules.refactoring.spi.ui.RefactoringUI",
        Libraries.MODULES_REFACTORING),
    REFERENCEABLE_FROM_IMPORTS(
        "org.nemesis.antlr.spi.language.ReferenceableFromImports",
        Libraries.ANTLR_LANGUAGE),
    REFORMAT("org.netbeans.modules.editor.indent.api.Reformat", Libraries.INDENT),
    REFORMAT_TASK("org.netbeans.modules.editor.indent.spi.ReformatTask",
        Libraries.INDENT),
    REGIONS_KEY("org.nemesis.extraction.key.RegionsKey", Libraries.EXTRACTION),
    REGION_EXTRACTION_BUILDER("org.nemesis.extraction.RegionExtractionBuilder",
        Libraries.EXTRACTION),
    REGION_KEY("org.nemesis.extraction.key.RegionKey", Libraries.EXTRACTION),
    REGISTERABLE_RESOLVER(
        "org.nemesis.extraction.attribution.RegisterableResolver",
        Libraries.EXTRACTION),
    RELATIVE_RESOLVER("org.nemesis.source.api.RelativeResolver", Libraries.INPUT),
    RELATIVE_RESOLVER_IMPLEMENTATION(
        "org.nemesis.source.spi.RelativeResolverImplementation", Libraries.INPUT),
    RELEASABLE_HIGHLIGHTS_CONTAINER(
        "org.netbeans.spi.editor.highlighting.ReleasableHighlightsContainer",
        Libraries.LIB2),
    RENAME_ACTION("org.openide.actions.RenameAction", Libraries.ACTIONS),
    RENAME_AUGMENTER("org.nemesis.antlr.instantrename.spi.RenameAugmenter",
        Libraries.RENAME),
    RENAME_NAMED_PLUGIN("org.nemesis.antlr.refactoring.RenameNamedPlugin",
        Libraries.REFACTORING),
    RENAME_PARTICIPANT("org.nemesis.antlr.instantrename.RenameParticipant",
        Libraries.RENAME),
    RENAME_POST_PROCESSOR(
        "org.nemesis.antlr.instantrename.spi.RenamePostProcessor",
        Libraries.RENAME),
    RENAME_QUERY_RESULT("org.nemesis.antlr.instantrename.spi.RenameQueryResult",
        Libraries.RENAME),
    RENAME_REFACTORING("org.netbeans.modules.refactoring.api.RenameRefactoring",
        Libraries.MODULES_REFACTORING),
    REPLACE_RANGES("org.nemesis.antlr.refactoring.ReplaceRanges",
        Libraries.REFACTORING),
    REQUEST_PROCESSOR("org.openide.util.RequestProcessor", Libraries.UTIL),
    REQUEST_PROCESSOR_TASK("org.openide.util.RequestProcessor.Task",
        Libraries.UTIL),
    RESOLUTION_CONSUMER("org.nemesis.extraction.ResolutionConsumer",
        Libraries.EXTRACTION),
    RESOLVER_REGISTRY("org.nemesis.extraction.attribution.ResolverRegistry",
        Libraries.EXTRACTION),
    RESULT("org.netbeans.modules.parsing.spi.Parser.Result", Libraries.PARSING),
    RESULT_ITERATOR("org.netbeans.modules.parsing.api.ResultIterator",
        Libraries.PARSING),
    ROTATING_COLORS("com.mastfrog.colors.RotatingColors", Libraries.WRAPPER),
    RULES_MAPPING("com.mastfrog.antlr.utils.RulesMapping", Libraries.UTILS),
    RULE_CONTEXT("org.antlr.v4.runtime.RuleContext", Libraries.ANTLR_WRAPPER),
    RULE_HIERARCHY_PREDICATE_BUILDER(
        "org.nemesis.extraction.RuleHierarchyPredicateBuilder",
        Libraries.EXTRACTION),
    RULE_NODE("org.antlr.v4.runtime.tree.RuleNode", Libraries.ANTLR_WRAPPER),
    RULE_SUBSTITUTIONS(
        "org.nemesis.antlr.spi.language.AntlrLanguageRegistration.CodeCompletion.RuleSubstitutions",
        Libraries.ANTLR_LANGUAGE),
    SAVE_ACTION("org.openide.actions.SaveAction", Libraries.ACTIONS),
    SAVE_COOKIE("org.openide.cookies.SaveCookie", Libraries.NODES),
    SCHEDULER("org.netbeans.modules.parsing.spi.Scheduler", Libraries.PARSING),
    SCHEDULER_EVENT("org.netbeans.modules.parsing.spi.SchedulerEvent",
        Libraries.PARSING),
    SCHEDULER_TASK("org.netbeans.modules.parsing.spi.SchedulerTask",
        Libraries.PARSING),
    SCROLLER("org.nemesis.swing.Scroller", Libraries.SWING_UTILS),
    SEARCHABLE_NAVIGATOR_PANEL(
        "org.nemesis.antlr.navigator.SearchableNavigatorPanel",
        Libraries.NAVIGATORS),
    SEMANTIC_REGION("org.nemesis.data.SemanticRegion", Libraries.MODELS),
    SEMANTIC_REGIONS("org.nemesis.data.SemanticRegions", Libraries.MODELS),
    SEMANTIC_REGIONS_BUILDER(
        "org.nemesis.data.SemanticRegions.SemanticRegionsBuilder",
        Libraries.MODELS),
    SEMANTIC_REGION_PANEL_CONFIG(
        "org.nemesis.antlr.navigator.SemanticRegionPanelConfig",
        Libraries.NAVIGATORS),
    SERVICE_PROVIDER("org.openide.util.lookup.ServiceProvider", Libraries.LOOKUP),
    SERVICE_PROVIDERS("org.openide.util.lookup.ServiceProviders",
        Libraries.LOOKUP),
    SET_SUPPLIER("org.nemesis.antlr.subscription.SetSupplier",
        Libraries.ANTLR_COMMON),
    SET_TYPES("org.nemesis.antlr.subscription.SetTypes", Libraries.ANTLR_COMMON),
    SHUTDOWN_HOOKS("org.nemesis.antlr.common.ShutdownHooks",
        Libraries.ANTLR_COMMON),
    SIMPLE_FORMATTING_ACTION(
        "org.nemesis.antlrformatting.api.SimpleFormattingAction",
        Libraries.FORMATTERS),
    SIMPLE_HTML_LABEL("org.nemesis.swing.html.SimpleHtmlLabel",
        Libraries.SWING_UTILS),
    SIMPLE_IMPORTERS_FINDER(
        "org.nemesis.antlr.refactoring.usages.SimpleImportersFinder",
        Libraries.REFACTORING),
    SIMPLE_NAVIGATOR_REGISTRATION(
        "org.nemesis.antlr.navigator.SimpleNavigatorRegistration",
        Libraries.NAVIGATORS),
    SIMPLE_REFACTORING_ELEMENT_IMPLEMENTATION(
        "org.netbeans.modules.refactoring.spi.SimpleRefactoringElementImplementation",
        Libraries.MODULES_REFACTORING),
    SIMPLE_REGISTERABLE_RESOLVER(
        "org.nemesis.extraction.attribution.SimpleRegisterableResolver",
        Libraries.EXTRACTION),
    SIMPLE_USAGES_FINDER(
        "org.nemesis.antlr.refactoring.usages.SimpleUsagesFinder",
        Libraries.REFACTORING),
    SINGLETON_ENCOUNTER(
        "org.nemesis.extraction.SingletonEncounters.SingletonEncounter",
        Libraries.EXTRACTION),
    SINGLETON_ENCOUNTERS("org.nemesis.extraction.SingletonEncounters",
        Libraries.EXTRACTION),
    SINGLETON_EXTRACTION_BUILDER(
        "org.nemesis.extraction.SingletonExtractionBuilder",
        Libraries.EXTRACTION),
    SINGLETON_FIND_USAGES_PLUGIN(
        "org.nemesis.antlr.refactoring.SingletonFindUsagesPlugin",
        Libraries.REFACTORING),
    SINGLETON_KEY("org.nemesis.extraction.key.SingletonKey",
        Libraries.EXTRACTION),
    SINGLETON_USAGES_FINDER(
        "org.nemesis.antlr.refactoring.usages.SingletonUsagesFinder",
        Libraries.REFACTORING),
    SINGLE_INSTANCE_LOCALIZER(
        "org.nemesis.localizers.spi.SingleInstanceLocalizer",
        Libraries.LOCALIZERS),
    SKELETON_GRAMMAR_TYPE(
        "org.nemesis.antlr.project.spi.addantlr.SkeletonGrammarType",
        Libraries.HELPERS),
    SLICE("org.nemesis.data.graph.hetero.Slice", Libraries.MODELS),
    SNAPSHOT("org.netbeans.modules.parsing.api.Snapshot", Libraries.PARSING),
    SORT_TYPES("org.nemesis.antlr.navigator.SortTypes", Libraries.NAVIGATORS),
    SOURCE("org.netbeans.modules.parsing.api.Source", Libraries.PARSING),
    SOURCES("org.netbeans.api.project.Sources", Libraries.PROJECTAPI),
    SOURCE_GROUP("org.netbeans.api.project.SourceGroup", Libraries.PROJECTAPI),
    SOURCE_MODIFICATION_EVENT(
        "org.netbeans.modules.parsing.spi.SourceModificationEvent",
        Libraries.PARSING),
    SPECIFICATION_VERSION("org.openide.modules.SpecificationVersion",
        Libraries.ANTLR_WRAPPER),
    SPINNER("com.mastfrog.swing.activity.Spinner", Libraries.WRAPPER),
    STATIC_RESOURCE("org.netbeans.api.annotations.common.StaticResource",
        Libraries.COMMON),
    STATUS_DISPLAYER("org.openide.awt.StatusDisplayer", Libraries.AWT),
    STRINGS("com.mastfrog.util.strings.Strings", Libraries.WRAPPER),
    STRING_GRAPH("com.mastfrog.graph.StringGraph", Libraries.WRAPPER),
    STRING_PREDICATES("com.mastfrog.predicates.string.StringPredicates",
        Libraries.WRAPPER),
    SUBSCRIBABLE("org.nemesis.antlr.subscription.Subscribable",
        Libraries.ANTLR_COMMON),
    SUBSCRIBABLE_BUILDER("org.nemesis.antlr.subscription.SubscribableBuilder",
        Libraries.ANTLR_COMMON),
    SUBSCRIBABLE_NOTIFIER("org.nemesis.antlr.subscription.SubscribableNotifier",
        Libraries.ANTLR_COMMON),
    SUBSCRIBERS_STORE("org.nemesis.antlr.subscription.SubscribersStore",
        Libraries.ANTLR_COMMON),
    SUBSCRIBERS_STORE_CONTROLLER(
        "org.nemesis.antlr.subscription.SubscribersStoreController",
        Libraries.ANTLR_COMMON),
    SUMMING_FUNCTION("org.nemesis.extraction.SummingFunction",
        Libraries.EXTRACTION),
    SUPPLEMENTARY_TOKEN_COMPLETION(
        "org.nemesis.antlr.spi.language.AntlrLanguageRegistration.CodeCompletion.SupplementaryTokenCompletion",
        Libraries.ANTLR_LANGUAGE),
    SYNC_DOCUMENT_REGION("org.nemesis.antlr.instantrename.SyncDocumentRegion",
        Libraries.RENAME),
    SYNTAX_ERROR("org.nemesis.antlr.spi.language.SyntaxError",
        Libraries.ANTLR_LANGUAGE),
    SYNTAX_INFO(
        "org.nemesis.antlr.spi.language.AntlrLanguageRegistration.SyntaxInfo",
        Libraries.ANTLR_LANGUAGE),
    SYNTAX_SUPPORT("org.netbeans.editor.SyntaxSupport", Libraries.LIB),
    SYSTEM_ACTION("org.openide.util.actions.SystemAction", Libraries.UTIL_UI),
    TASK("org.netbeans.modules.parsing.api.Task", Libraries.PARSING),
    TASK_FACTORY("org.netbeans.modules.parsing.spi.TaskFactory",
        Libraries.PARSING),
    TASK_LISTENER("org.openide.util.TaskListener", Libraries.UTIL),
    TERMINAL_NODE("org.antlr.v4.runtime.tree.TerminalNode",
        Libraries.ANTLR_WRAPPER),
    TEXT_CELL("com.mastfrog.swing.cell.TextCell", Libraries.WRAPPER),
    TEXT_CELL_CELL_RENDERER("com.mastfrog.swing.cell.TextCellCellRenderer",
        Libraries.WRAPPER),
    TEXT_CELL_LABEL("com.mastfrog.swing.cell.TextCellLabel", Libraries.WRAPPER),
    TIMED_WEAK_REFERENCE("org.nemesis.antlr.common.TimedWeakReference",
        Libraries.ANTLR_COMMON),
    THROWING_BI_CONSUMER("com.mastfrog.function.throwing.ThrowingBiConsumer",
        Libraries.WRAPPER),
    THROWING_BI_FUNCTION("com.mastfrog.function.throwing.ThrowingBiFunction",
        Libraries.WRAPPER),
    THROWING_CONSUMER("com.mastfrog.function.throwing.ThrowingConsumer",
        Libraries.WRAPPER),
    THROWING_FUNCTION("com.mastfrog.function.throwing.ThrowingFunction",
        Libraries.WRAPPER),
    THROWING_RUNNABLE("com.mastfrog.function.throwing.ThrowingRunnable",
        Libraries.WRAPPER),
    THROWING_SUPPLIER("com.mastfrog.function.throwing.ThrowingSupplier",
        Libraries.WRAPPER),
    THROWING_TRI_CONSUMER("com.mastfrog.function.throwing.ThrowingTriConsumer",
        Libraries.WRAPPER),
    TOKEN("org.antlr.runtime.Token", Libraries.RUNTIME),
    TOKEN_CATEGORIZER(
        "org.nemesis.antlr.spi.language.highlighting.TokenCategorizer",
        Libraries.ANTLR_LANGUAGE),
    TOKEN_CATEGORY("org.netbeans.editor.TokenCategory", Libraries.LIB),
    TOKEN_CHANGE("org.netbeans.api.lexer.TokenChange", Libraries.LEXER),
    TOKEN_CONTEXT_PATH("org.netbeans.editor.TokenContextPath", Libraries.LIB),
    TOKEN_FACTORY("org.antlr.v4.runtime.TokenFactory", Libraries.ANTLR_WRAPPER),
    TOKEN_HIERARCHY("org.netbeans.api.lexer.TokenHierarchy", Libraries.LEXER),
    TOKEN_HIERARCHY_CONTROL("org.netbeans.spi.lexer.TokenHierarchyControl",
        Libraries.LEXER),
    TOKEN_HIERARCHY_EVENT("org.netbeans.api.lexer.TokenHierarchyEvent",
        Libraries.LEXER),
    TOKEN_HIERARCHY_EVENT_TYPE("org.netbeans.api.lexer.TokenHierarchyEventType",
        Libraries.LEXER),
    TOKEN_HIERARCHY_LISTENER("org.netbeans.api.lexer.TokenHierarchyListener",
        Libraries.LEXER),
    TOKEN_ID("org.netbeans.editor.TokenID", Libraries.LIB),
    TOKEN_PATTERN_BUILDER("com.mastfrog.editor.features.TokenPatternBuilder",
        Libraries.FEATURES),
    TOKEN_REWRITER("org.nemesis.antlrformatting.api.TokenRewriter",
        Libraries.FORMATTERS),
    TOKEN_SEQUENCE("org.netbeans.api.lexer.TokenSequence", Libraries.LEXER),
    TOKEN_SOURCE("org.antlr.v4.runtime.TokenSource", Libraries.ANTLR_WRAPPER),
    TOKEN_STREAM("org.antlr.v4.runtime.TokenStream", Libraries.ANTLR_WRAPPER),
    TOKEN_STREAM_REWRITER("org.antlr.v4.runtime.TokenStreamRewriter",
        Libraries.ANTLR_WRAPPER),
    TOKEN_UTILS("org.nemesis.antlr.completion.TokenUtils",
        Libraries.CODE_COMPLETION),
    TOP_COMPONENT("org.openide.windows.TopComponent", Libraries.WINDOWS),
    TREE("org.antlr.runtime.tree.Tree", Libraries.RUNTIME),
    TREE_NODE_SEARCH_RESULT(
        "com.mastfrog.antlr.utils.TreeUtils.TreeNodeSearchResult",
        Libraries.UTILS),
    TREE_NODE_STREAM("org.antlr.runtime.tree.TreeNodeStream", Libraries.RUNTIME),
    TREE_UTILS("com.mastfrog.antlr.utils.TreeUtils", Libraries.UTILS),
    TRI_CONSUMER("com.mastfrog.function.TriConsumer", Libraries.WRAPPER),
    TRI_FUNCTION("com.mastfrog.function.TriFunction", Libraries.WRAPPER),
    TYPED_BREAK_INTERCEPTOR(
        "org.netbeans.spi.editor.typinghooks.TypedBreakInterceptor",
        Libraries.LIB2),
    TYPED_TEXT_INTERCEPTOR(
        "org.netbeans.spi.editor.typinghooks.TypedTextInterceptor",
        Libraries.LIB2),
    UI("org.netbeans.modules.refactoring.spi.ui.UI",
        Libraries.MODULES_REFACTORING),
    UNDO_REDO("org.openide.awt.UndoRedo", Libraries.AWT),
    UNKNOWN_NAME_REFERENCE("org.nemesis.extraction.UnknownNameReference",
        Libraries.EXTRACTION),
    UNKNOWN_NAME_REFERENCE_RESOLVER(
        "org.nemesis.extraction.UnknownNameReferenceResolver",
        Libraries.EXTRACTION),
    UPGRADER("com.mastfrog.antlr.project.helpers.ant.Upgrader", Libraries.ANT),
    UP_TO_DATENESS("org.nemesis.antlr.projectupdatenotificaton.UpToDateness",
        Libraries.ANTLR_COMMON),
    USAGES_FINDER("org.nemesis.antlr.refactoring.usages.UsagesFinder",
        Libraries.REFACTORING),
    USER_TASK("org.netbeans.modules.parsing.api.UserTask", Libraries.PARSING),
    UTILITIES("org.openide.util.Utilities", Libraries.UTIL_UI),
    UTIL_EXCEPTIONS("org.openide.util.Exceptions", Libraries.UTIL),
    UTIL_TASK("org.openide.util.Task", Libraries.UTIL),
    VOCABULARY("org.antlr.v4.runtime.Vocabulary", Libraries.ANTLR_WRAPPER),
    WEAK_LISTENERS("org.openide.util.WeakListeners", Libraries.UTIL),
    WEAK_SET("org.openide.util.WeakSet", Libraries.UTIL),
    WHERE_USED_QUERY("org.netbeans.modules.refactoring.api.WhereUsedQuery",
        Libraries.MODULES_REFACTORING),
    WINDOW_MANAGER("org.openide.windows.WindowManager", Libraries.WINDOWS),
    WRAPPER("com.mastfrog.abstractions.Wrapper", Libraries.WRAPPER),
    XMLUTIL("org.openide.xml.XMLUtil", Libraries.UTIL),
    YENTA("org.netbeans.contrib.yenta.Yenta", Libraries.API),
    ZORDER("org.netbeans.spi.editor.highlighting.ZOrder", Libraries.LIB2)
    ;
    private final String fqn;
    private final Libraries lib;
    private static final Set<Libraries> TOUCHED = EnumSet.noneOf(
                Libraries.class);

    private static final Set<Libraries> REPORTED = EnumSet.noneOf(
                Libraries.class);

    KnownTypes(String fqn, Libraries lib) {
        this.fqn = fqn;
        this.lib = lib;
    }

    KnownTypes(String fqn) {
        this.fqn = fqn;
        this.lib = null;
    }

    @Override
    public String toString() {
        return qnameNotouch() + ":" + fqn + "<-" + (lib == null ? "jdk" : lib);
    }

    /**
     * Fetch fully qualified name of the class.
     **/
    @Override
    public String qname() {
        touch();
        return fqn;
    }

    /**
     * Fetch the fully qualified name without adding this libraries origin to
     * the set of known-used libraries
     **/
    @Override
    public String qnameNotouch() {
        return fqn;
    }

    /**
     * Fetch the simple name of the class
     **/
    @Override
    public String simpleName() {
        touch();
        return AnnotationUtils.simpleName(fqn);
    }

    /**
     * Fetch the library this class is in, if non-JDK
     **/
    @Override
    public Library origin() {
        return lib;
    }

    private void touch() {
        if (lib != null) {
            if (!REPORTED.contains(lib)) {
                TOUCHED.add(lib);
            }
        }
    }

    public static String touchedMessage() {
        if (TOUCHED.isEmpty()) {
            return "";
        }
        StringBuilder result = new StringBuilder(1024);
        result.append("\nGenerated code requires the following dependencies:\n");
        for (Libraries lib : TOUCHED) {
            if (lib != null) {
                result.append(lib.toXML());
                REPORTED.add(lib);
            }
        }
        TOUCHED.clear();
        return result.toString();
    }

    public static String touchedMessage(Object what) {
        if (TOUCHED.isEmpty()) {
            return "";
        }
        StringBuilder result = new StringBuilder(1024);
        result.append("\nCode generated by ");
        result.append(what.getClass().getSimpleName());
        result.append(
            " and other annotation processors requires the following dependencies be set for this project:\n");
        for (Libraries lib : TOUCHED) {
            if (lib != null) {
                result.append(lib.toXML());
                REPORTED.add(lib);
            }
        }
        TOUCHED.clear();
        return result.toString();
    }

    public static KnownTypes forName(String fqn) {
        for (KnownTypes type : values()) {
            if (type.fqn.equals(fqn) == true) {
                return type;
            }
        }
        return null;
    }

}
